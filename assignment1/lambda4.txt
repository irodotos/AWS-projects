import json
import boto3
import uuid

def lambda_handler(event, context):
    # READ THE IDS FROM QUEUE
    print("event= " , event)
    id= json.loads(event['Records'][0]['body'])
    print("id from input= " , id)


    client = boto3.client('stepfunctions')
    transactionId = str(uuid.uuid4())
    inputDict = { "request": {
                "key": "get" ,
                "id": id
                }
            }
    # START THE STEPFUNCTION
    stepfunctionArn = "arn:aws:states:us-east-1:535490399091:stateMachine:MyStateMachine"
    try:
        response = client.start_execution(
            stateMachineArn = stepfunctionArn ,
            name = transactionId,
            input = json.dumps(inputDict)
            )
    except Exception as e:
        print("cant start execution of stepfunction ," , e)
    print("respone = " , response)

    stepfunctionExecArn = "arn:aws:states:us-east-1:535490399091:execution:MyStateMachine"
    execArn= stepfunctionExecArn + ":" + transactionId
    print("execArn = " , execArn)

    # GET THE RESULT OF THE STEP FUNCTION
    try:
        result = client.describe_execution(
                executionArn= execArn
            )
        while(result["status"] == 'RUNNING'):
            try:
                result = client.describe_execution(
                    executionArn= execArn
                )
            except Exception as e:
                print("cant get describe_execution ," , e)
    except Exception as e:
        print("cant get describe_execution ," , e)
    print("result = " , result)

    client = boto3.client('lambda')
    try:
        response = client.invoke(
            FunctionName='call_endpoint_send_expectedResult_and_result_to_lambda6',
            InvocationType='Event',
            Payload= json.dumps( result['output'] )
        )
    except Exception as e:
        print(e)



    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }

